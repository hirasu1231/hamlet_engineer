{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{434:function(e,t,n){e.exports=n.p+\"assets/img/ninsyo.4c0f05f5.png\"},435:function(e,t,n){e.exports=n.p+\"assets/img/json_save.627a5237.png\"},436:function(e,t,n){e.exports=n.p+\"assets/img/api_lib.a8bfd74a.png\"},437:function(e,t,n){e.exports=n.p+\"assets/img/youtube.066d4d2c.png\"},459:function(e,t,n){\"use strict\";n.r(t);var a=n(1),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"youtubeの動画投稿を簡単にする\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#youtubeの動画投稿を簡単にする\"}},[e._v(\"#\")]),e._v(\" youtubeの動画投稿を簡単にする\")]),e._v(\" \"),a(\"h2\",{attrs:{id:\"事前準備\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事前準備\"}},[e._v(\"#\")]),e._v(\" 事前準備\")]),e._v(\" \"),a(\"p\",[e._v(\"googleのAPIを利用するためのライブラリをインストールします。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-init extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"pip install google-api-python-client\\n\")])])]),a(\"h2\",{attrs:{id:\"gcpでのアプリケーション登録\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#gcpでのアプリケーション登録\"}},[e._v(\"#\")]),e._v(\" GCPでのアプリケーション登録\")]),e._v(\" \"),a(\"p\",[e._v(\"GCPのプロジェクト作成後，GCPのコンソールから認証情報を作成します．今回はOAuth2.0を利用します．\")]),e._v(\" \"),a(\"p\",[e._v(\"(1) 左上のメニューバーから認証情報を作成->OAuthクライアントID と進みます．\\n\"),a(\"img\",{attrs:{src:n(434),alt:\"\"}})]),e._v(\" \"),a(\"p\",[e._v(\"(2) OAuth同意画面から「外部」を選択し，アプリ登録の編集へ進みアプリ名を記入します．(テキトーにyoutube_uplaod)\")]),e._v(\" \"),a(\"p\",[e._v(\"(3) そして，再び認証情報を作成->OAuthクライアントIDに進み，アプリケーションの種類と名前を記入します．(自分勝手に楽しむようなので，デスクトップアプリ,mac1としました)\")]),e._v(\" \"),a(\"p\",[e._v(\"(4) クライアントID, クライアントシークレットはjsonで保存します．\\n\"),a(\"img\",{attrs:{src:n(435),alt:\"\"}})]),e._v(\" \"),a(\"p\",[e._v(\"(5) GCPのAPIライブラリから「YouTube Data API v3」を検索します．\\n\"),a(\"img\",{attrs:{src:n(436),alt:\"\"}})]),e._v(\" \"),a(\"h2\",{attrs:{id:\"アップロード用ソースの作成\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#アップロード用ソースの作成\"}},[e._v(\"#\")]),e._v(\" アップロード用ソースの作成\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"フォルダ構成\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#フォルダ構成\"}},[e._v(\"#\")]),e._v(\" フォルダ構成\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-フォルダ構成 extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"$ tree\\n.\\n├── movies\\n│   └── sample001.MP4  # アップロード対象の動画\\n├── client_secrets.json\\n└── upload_video.py\\n\\n\")])])]),a(\"h3\",{attrs:{id:\"json\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#json\"}},[e._v(\"#\")]),e._v(\" JSON\")]),e._v(\" \"),a(\"p\",[e._v(\"client_secrets.jsonを作成します。GCPでのアプリケーション登録(4)で保存したjsonファイルを編集すると楽になります．\"),a(\"br\"),e._v(\"\\nここでは，例としてclient_idとclient_secretを以下のようにする．\"),a(\"br\"),e._v(\"\\nclient_id:111111-sample_client_id.apps.googleusercontent.com\"),a(\"br\"),e._v(\"\\nclient_secret:SampleClientSecret\"),a(\"br\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-client_secrets.json extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('{\\n  \"web\": {\\n    \"client_id\": \"111111-sample_client_id.apps.googleusercontent.com\",\\n    \"client_secret\": \"SampleClientSecret\",\\n    \"redirect_uris\": [],\\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\\n    \"token_uri\": \"https://accounts.google.com/o/oauth2/token\"\\n  }\\n}\\n')])])]),a(\"h3\",{attrs:{id:\"python\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#python\"}},[e._v(\"#\")]),e._v(\" Python\")]),e._v(\" \"),a(\"p\",[e._v(\"基本は\"),a(\"a\",{attrs:{href:\"https://developers.google.com/youtube/v3/guides/uploading_a_video?hl=ja\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"公式\"),a(\"OutboundLink\")],1),e._v(\"のソースはPython2系で書かれているので、Python3で動くように書き換えています．\"),a(\"br\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[e._v(\"httplibからhttp.clientへ移行\")]),e._v(\" \"),a(\"li\",[e._v(\"print文の書き換え\")])]),e._v(\" \"),a(\"div\",{staticClass:\"language-upload_video.py extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('import http.client  # httplibはPython3はhttp.clientへ移行\\nimport httplib2\\nimport os\\nimport random\\nimport sys\\nimport time\\n\\nfrom apiclient.discovery import build\\nfrom apiclient.errors import HttpError\\nfrom apiclient.http import MediaFileUpload\\nfrom oauth2client.client import flow_from_clientsecrets\\nfrom oauth2client.file import Storage\\nfrom oauth2client.tools import argparser, run_flow\\n\\n\\nhttplib2.RETRIES = 1\\nMAX_RETRIES = 10\\nRETRIABLE_EXCEPTIONS = (httplib2.HttpLib2Error,\\n                        IOError,\\n                        http.client.NotConnected,\\n                        http.client.IncompleteRead,\\n                        http.client.ImproperConnectionState,\\n                        http.client.CannotSendRequest,\\n                        http.client.CannotSendHeader,\\n                        http.client.ResponseNotReady,\\n                        http.client.BadStatusLine)\\nRETRIABLE_STATUS_CODES = [500, 502, 503, 504]\\nCLIENT_SECRETS_FILE = \"client_secrets.json\"\\nMISSING_CLIENT_SECRETS_MESSAGE = \"\"\"\\nWARNING: Please configure OAuth 2.0\\n\\nTo make this sample run you will need to populate the client_secrets.json file\\nfound at:\\n\\n   %s\\n\\nwith information from the API Console\\nhttps://console.developers.google.com/\\n\\nFor more information about the client_secrets.json file format, please visit:\\nhttps://developers.google.com/api-client-library/python/guide/aaa_client_secrets\\n\"\"\" % os.path.abspath(os.path.join(os.path.dirname(__file__),\\n                                   CLIENT_SECRETS_FILE))\\n\\nYOUTUBE_UPLOAD_SCOPE = \"https://www.googleapis.com/auth/youtube.upload\"\\nYOUTUBE_API_SERVICE_NAME = \"youtube\"\\nYOUTUBE_API_VERSION = \"v3\"\\n\\n\\nVALID_PRIVACY_STATUSES = (\"public\", \"private\", \"unlisted\")\\n\\n\\ndef get_authenticated_service(args):\\n    flow = flow_from_clientsecrets(CLIENT_SECRETS_FILE,\\n                                   scope=YOUTUBE_UPLOAD_SCOPE,\\n                                   message=MISSING_CLIENT_SECRETS_MESSAGE)\\n\\n    storage = Storage(\"%s-oauth2.json\" % sys.argv[0])\\n    credentials = storage.get()\\n\\n    if credentials is None or credentials.invalid:\\n        credentials = run_flow(flow, storage, args)\\n\\n    return build(YOUTUBE_API_SERVICE_NAME,\\n                 YOUTUBE_API_VERSION,\\n                 http=credentials.authorize(httplib2.Http()))\\n\\n\\ndef initialize_upload(youtube, options):\\n    tags = None\\n    if options.keywords:\\n        tags = options.keywords.split(\",\")\\n\\n    body = dict(\\n        snippet=dict(\\n            title=options.title,\\n            description=options.description,\\n            tags=tags,\\n            categoryId=options.category\\n        ),\\n        status=dict(\\n            privacyStatus=options.privacyStatus\\n        )\\n    )\\n\\n    insert_request = youtube.videos().insert(\\n        part=\",\".join(body.keys()),\\n        body=body,\\n        media_body=MediaFileUpload(options.file, chunksize=-1, resumable=True)\\n    )\\n\\n    resumable_upload(insert_request)\\n\\n\\ndef resumable_upload(insert_request):\\n    response = None\\n    error = None\\n    retry = 0\\n    while response is None:\\n        try:\\n            print(\"Uploading file...\")  # print文\\n            status, response = insert_request.next_chunk()\\n            if response is not None:\\n                if \\'id\\' in response:\\n                    print(\"Video id \\'%s\\' was successfully uploaded.\" % response[\\'id\\'])\\n                else:\\n                    exit(\"The upload failed with an unexpected response: %s\" % response)\\n        except HttpError as e:\\n            if e.resp.status in RETRIABLE_STATUS_CODES:\\n                error = \"A retriable HTTP error %d occurred:\\\\n%s\" % \\\\\\n                        (e.resp.status, e.content)\\n            else:\\n                raise\\n        except RETRIABLE_EXCEPTIONS as e:\\n            error = \"A retriable error occurred: %s\" % e\\n        if error is not None:\\n            print(error)\\n            retry += 1\\n            if retry > MAX_RETRIES:\\n              exit(\"No longer attempting to retry.\")\\n            max_sleep = 2 ** retry\\n            sleep_seconds = random.random() * max_sleep\\n            print(\"Sleeping %f seconds and then retrying...\" % sleep_seconds)\\n            time.sleep(sleep_seconds)\\n\\n\\nif __name__ == \\'__main__\\':\\n    argparser.add_argument(\"--file\", required=True, help=\"Video file to upload\")\\n    argparser.add_argument(\"--title\", help=\"Video title\", default=\"Test Title\")\\n    argparser.add_argument(\"--description\",\\n                           help=\"Video description\",\\n                           default=\"Test Description\")\\n    argparser.add_argument(\"--category\", default=\"22\",\\n                           help=\"Numeric video category. \" +\\n                                \"See https://developers.google.com/youtube/v3/docs/videoCategories/list\")\\n    argparser.add_argument(\"--keywords\", help=\"Video keywords, comma separated\",\\n                           default=\"\")\\n    argparser.add_argument(\"--privacyStatus\", choices=VALID_PRIVACY_STATUSES,\\n                           default=VALID_PRIVACY_STATUSES[0],\\n                           help=\"Video privacy status.\")\\n    args = argparser.parse_args()\\n\\n    if not os.path.exists(args.file):\\n        exit(\"Please specify a valid file using the --file= parameter.\")\\n\\n    youtube = get_authenticated_service(args)\\n    try:\\n        initialize_upload(youtube, args)\\n    except HttpError as e:\\n        print(\"An HTTP error %d occurred:\\\\n%s\" % (e.resp.status, e.content))\\n')])])]),a(\"ul\",[a(\"li\",[e._v(\"YouTube Data APIはsnippetに設定した内容がAPIに渡されます.\\ninitialize_upload内のbodyでsnippetとして渡す値のdictを作っています。\")]),e._v(\" \"),a(\"li\",[e._v(\"snippetに渡す値は引数からargsとして取得しています.\")]),e._v(\" \"),a(\"li\",[e._v(\"get_authenticated_serviceでは、YouTube Data APIのリソース名と操作名(insert等)から、APIを利用するオブジェクト(?)をbuildしてreturnしています。今回の場合、buildしたオブジェクトをinitialize_uploadに渡して、youtube.videos().insertでアップロードを実行します.\")])]),e._v(\" \"),a(\"h2\",{attrs:{id:\"アップロードの実行\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#アップロードの実行\"}},[e._v(\"#\")]),e._v(\" アップロードの実行\")]),e._v(\" \"),a(\"p\",[e._v(\"コマンドラインからだと以下の通り実行します。\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-アップロードの実行 extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('python upload_video.py --file=\"./movies/sample001.mp4\" \\\\\\n                       --title=\"Sample Movie\" \\\\\\n                       --description=\"This is a sample movie.\" \\\\\\n                       --category=\"22\" \\\\\\n                       --privacyStatus=\"private\"\\n')])])]),a(\"p\",[e._v(\"引数の意味は以下の通りです。\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[e._v(\"file: アップロードする動画のパス\")]),e._v(\" \"),a(\"li\",[e._v(\"title: アップロード後の動画タイトル\")]),e._v(\" \"),a(\"li\",[e._v(\"description: 動画の説明\")]),e._v(\" \"),a(\"li\",[e._v(\"category: カテゴリー。デフォルトが22\")]),e._v(\" \"),a(\"li\",[e._v(\"privacyStatus: 動画の公開設定。privateだと非公開で投稿\")]),e._v(\" \"),a(\"li\",[e._v(\"auth_host_port: port番号の指定．デフォルトでは8080．docker等で特定のport番号を指定している場合に使用する\")])]),e._v(\" \"),a(\"p\",[e._v(\"snippetとして指定できる項目や意味は以下に記載があります。\"),a(\"br\"),e._v(\" \"),a(\"a\",{attrs:{href:\"https://developers.google.com/youtube/v3/docs/videos?hl=ja#resource\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"YouTube Data API Videos\"),a(\"OutboundLink\")],1),a(\"br\"),e._v(\" \"),a(\"a\",{attrs:{href:\"https://developers.google.com/youtube/v3/docs/videos/insert?hl=ja\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"YouTube Data API Videos: insert\"),a(\"OutboundLink\")],1),a(\"br\"),e._v(\" \"),a(\"br\"),e._v(\"\\n初めて実行した際は表示されるURLをブラウザで表示すると，Googleアカウントの選択とYouTubeの管理許可を求める画面が表示されるので、画面に従って許可し認証コードを「Enter verification code:」の横に貼り付ける．\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-初アップロード extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Go to the following link in your browser:\\n\\n    https://accounts.google.com/o/oauth2/auth?＊＊＊＊＊＊＊＊＊＊＊＊＊＊\\n\\nEnter verification code:\\n\")])])]),a(\"p\",[e._v(\"少し経つと以下の通りアップロードが完了し，YouTube Studioからも確認できます．\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-実行結果 extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Uploading file...\\nVideo id '[video id]' was successfully uploaded.\\n\")])])]),a(\"p\",[a(\"img\",{attrs:{src:n(437),alt:\"\"}})]),e._v(\" \"),a(\"h2\",{attrs:{id:\"今後のやりたいこと\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#今後のやりたいこと\"}},[e._v(\"#\")]),e._v(\" 今後のやりたいこと\")]),e._v(\" \"),a(\"p\",[e._v(\"なんとか，動画を一本あげることができました．これからは以下のことをやってみたいです．\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[e._v(\"エクセル表に動画のタイトル等をまとめて，時刻予約のように自動でアップロードされるようにする．\")]),e._v(\" \"),a(\"li\",[e._v(\"サムネ画像もエクセル表から自動で作成・アップロード時に選択されるようにする．\\n\"),a(\"ul\",[a(\"li\",[e._v(\"サムネ画像は特定の背景にタイトルの字幕をつける．\")]),e._v(\" \"),a(\"li\",[e._v(\"背景画像は3パターンほど用意しておく\")]),e._v(\" \"),a(\"li\",[e._v(\"背景画像の選択は乱数で決定する．\")])])]),e._v(\" \"),a(\"li\",[e._v(\"Flaskかeelでデスクトップアプリ化かも検討する(<-ここからは完全な趣味．「GUIならyoutubeのUI使えや!!」って話っっ)\")])]),e._v(\" \"),a(\"h2\",{attrs:{id:\"エラーコード\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#エラーコード\"}},[e._v(\"#\")]),e._v(\" エラーコード\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"エラーコード1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#エラーコード1\"}},[e._v(\"#\")]),e._v(\" エラーコード1\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-エラーコード1 extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"For more information about the client_secrets.json file format, please visit:\\nhttps://developers.google.com/api-client-library/python/guide/aaa_client_secrets\\n\")])])]),a(\"p\",[e._v(\"原因(ファイル名を間違えた)：client_secrets.jsonではなくclient_secret.jsonとファイル名を間違えて記入していた．\")]),e._v(\" \"),a(\"h3\",{attrs:{id:\"エラーコード2\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#エラーコード2\"}},[e._v(\"#\")]),e._v(\" エラーコード2\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-init extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('Traceback (most recent call last):\\n  File \"upload_video.py\", line 146, in <module>\\n    youtube = get_authenticated_service(args)\\n  File \"upload_video.py\", line 54, in get_authenticated_service\\n    flow = flow_from_clientsecrets(CLIENT_SECRETS_FILE,\\n  File \"/usr/local/lib/python3.8/site-packages/oauth2client/_helpers.py\", line 133, in positional_wrapper\\n    return wrapped(*args, **kwargs)\\n  File \"/usr/local/lib/python3.8/site-packages/oauth2client/client.py\", line 2134, in flow_from_clientsecrets\\n    client_type, client_info = clientsecrets.loadfile(filename,\\n  File \"/usr/local/lib/python3.8/site-packages/oauth2client/clientsecrets.py\", line 165, in loadfile\\n    return _loadfile(filename)\\n  File \"/usr/local/lib/python3.8/site-packages/oauth2client/clientsecrets.py\", line 126, in _loadfile\\n    return _validate_clientsecrets(obj)\\n  File \"/usr/local/lib/python3.8/site-packages/oauth2client/clientsecrets.py\", line 103, in _validate_clientsecrets\\n    if client_info[prop_name].startswith(\\'[[\\'):\\nAttributeError: \\'list\\' object has no attribute \\'startswith\\'\\n')])])]),a(\"p\",[e._v('原因(jsonの記入ミス)：公式ドキュメントの解釈を間違えて，client_secret.jsonの中身で\"client_secret.json\"と\"client_secret\"の記入を二重リストで記入していた．'),a(\"br\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-client_secrets.json extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v('# 間違い1\\n{\\n  \"web\": {\\n    \"client_id\": [[\"111111-sample_client_id.apps.googleusercontent.com\"]],\\n    \"client_secret\": [[\"SampleClientSecret\"]],\\n    \"redirect_uris\": [],\\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\\n    \"token_uri\": \"https://accounts.google.com/o/oauth2/token\"\\n  }\\n}\\n\\n# 間違い2\\n{\\n  \"web\": {\\n    \"client_id\": \"[[111111-sample_client_id.apps.googleusercontent.com]]\",\\n    \"client_secret\": \"[[SampleClientSecret]]\",\\n    \"redirect_uris\": [],\\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\\n    \"token_uri\": \"https://accounts.google.com/o/oauth2/token\"\\n  }\\n}\\n\\n# 正しい\\n{\\n  \"web\": {\\n    \"client_id\": \"111111-sample_client_id.apps.googleusercontent.com\",\\n    \"client_secret\": \"SampleClientSecret\",\\n    \"redirect_uris\": [],\\n    \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\\n    \"token_uri\": \"https://accounts.google.com/o/oauth2/token\"\\n  }\\n}\\n')])])]),a(\"h3\",{attrs:{id:\"エラーコード3\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#エラーコード3\"}},[e._v(\"#\")]),e._v(\" エラーコード3\")]),e._v(\" \"),a(\"p\",[e._v(\"「https://accounts.google.com/o/oauth2/auth?＊＊＊＊＊＊＊＊＊＊＊＊＊＊」に移動して許可しても認証コードがサーバーエラーで表示されなかった．\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-初アップロードエラー extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(\"Go to the following link in your browser:\\n\\n    https://accounts.google.com/o/oauth2/auth?＊＊＊＊＊＊＊＊＊＊＊＊＊＊\\n\\nEnter verification code:\\n\")])])]),a(\"p\",[e._v(\"原因(port番号)：デフォルトではport番号は8080となっているが，私はdocker上でport番号を1200と指定していたため，サーバーエラーが発生した．\"),a(\"br\"),e._v(\"\\n実行コマンドに「 --auth_host_port 1200」を追加してport番号を指定した．\")]),e._v(\" \"),a(\"div\",{staticClass:\"language-修正 extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[e._v(' python upload_video.py --file=\"./movies/sample001.mp4\" --title=\"Sample Movie\" --description=\"This is a sample movie.\" --category=\"22\" --privacyStatus=\"private\" --auth_host_port 1200\\n')])])]),a(\"h2\",{attrs:{id:\"参考サイト\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#参考サイト\"}},[e._v(\"#\")]),e._v(\" 参考サイト\")]),e._v(\" \"),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"https://qiita.com/ny7760/items/5a728fd9e7b40588237c\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"YouTubeAPIを利用して動画をアップロードする\"),a(\"OutboundLink\")],1)]),e._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://developers.google.com/youtube/v3/guides/uploading_a_video?hl=ja\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"YouTubeAPI 動画のアップロード\"),a(\"OutboundLink\")],1)]),e._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"https://qiita.com/tksnino/items/51c6dadfbf1e0214c89e\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"YouTubeAPIを使ってみた\"),a(\"OutboundLink\")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}